/*! circlepacker v1.1.7 | MIT (c) 2023 Georg Fischer <hi@snorpey.com> | https://github.com/snorpey/circlepacker#readme */
function e(e,t,i){"number"!=typeof e&&"number"!=typeof t&&(e=0,t=1),"number"!=typeof t&&(t=e,e=0);let r=e+Math.random()*(t-e);return i&&(r=parseInt(r,10)),r}function t(e){return e&&i(e.id)&&e.radius&&e.position&&"number"==typeof e.position.x&&"number"==typeof e.position.y}function i(e){return"number"==typeof e&&!isNaN(e)||"string"==typeof e&&e.length>0}function r(e,t){return"number"==typeof e&&e>=t}function o(e){return"object"==typeof e&&"number"==typeof e.x&&"number"==typeof e.y}class s{constructor(e){const t=e.workerPath?e.workerPath:"./CirclePackWorker.js";this.worker=new Worker(t,{type:"module"}),this.worker.addEventListener("message",this.receivedWorkerMessage.bind(this)),this.isContinuousModeActive="boolean"!=typeof e.continuousMode||e.continuousMode,this.onMoveStart=e.onMoveStart||null,this.onMove=e.onMove||null,this.onMoveEnd=e.onMoveEnd||null,this.lastCirclePositions=[],this.isLooping=!1,this.areItemsMoving=!1,this.animationFrameId=NaN,this.initialized=!0,e.centeringPasses&&this.setCenteringPasses(e.centeringPasses),e.collisionPasses&&this.setCollisionPasses(e.collisionPasses),this.addCircles(e.circles||[]),this.setBounds(e.bounds||{width:100,height:100}),this.setTarget(e.target||{x:50,y:50})}receivedWorkerMessage(e){const t=function(e){return e.data?JSON.parse(e.data):void 0}(e);if("MOVED"===t.type){const e=t.updatedCircles;this.areItemsMoving=this.hasItemMoved(e),!this.areItemsMoving&&this.isLooping&&this.initialized&&this.isContinuousModeActive&&this.stopLoop()}this.updateListeners(t)}updateWorker(t){var i,r;i=this.worker,r={messageId:Date.now()+e(0,.001,!0),action:t},i.postMessage(JSON.stringify(r))}updateListeners(e){"MOVE_START"===e.type&&"function"==typeof this.onMoveStart&&this.onMoveStart(),"MOVED"===e.type&&"function"==typeof this.onMove&&(this.lastCirclePositions=e.updatedCircles,this.onMove(e.updatedCircles)),"MOVE_END"===e.type&&"function"==typeof this.onMoveEnd&&this.onMoveEnd(e.updatedCircles)}addCircles(e){if(!Array.isArray(e))throw new Error("Can't add circles: the circles parameter is not an array.");if(e.length){if(!e.every(t))throw new Error("Can't add circles: some of the items are not well formatted.");this.isContinuousModeActive&&(this.areItemsMoving=!0),this.updateWorker({type:"ADD_CIRCLES",circles:e}),this.startLoop()}}addCircle(e){this.addCircles([e])}removeCircle(e){const t="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(t))throw new Error("Can't remove circle: the circleRef parameter is malformed.");this.updateWorker({type:"REMOVE_CIRCLE",id:t}),this.startLoop()}pinCircle(e){const t="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(t))throw new Error("Can't pin circle: the circleRef parameter is malformed.");this.updateWorker({type:"PIN_CIRCLE",id:t}),this.startLoop()}unpinCircle(e){const t="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(t))throw new Error("Can't unpin circle: the circleRef parameter is malformed.");this.updateWorker({type:"UNPIN_CIRCLE",id:t}),this.startLoop()}setCircleRadius(e,t){const o="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(o))throw new Error("Can't set circle radius: the circleRef parameter is malformed.");if(!r(t,0))throw new Error("Can't set circle radius: the passed radius is malformed.");this.updateWorker({type:"SET_CIRCLE_RADIUS",id:o,radius:t}),this.startLoop()}setCircleCenterPull(e,t){const r="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(r))throw new Error("Can't set circle center pull: the circleRef parameter is malformed.");this.updateWorker({type:"SET_CIRCLE_CENTER_PULL",id:r,centerPull:!!t}),this.startLoop()}setCenterPull(e){this.updateWorker({type:"SET_CENTER_PULL",centerPull:!!e}),this.startLoop()}setBounds(e){if(!function(e){return"object"==typeof e&&"number"==typeof e.width&&"number"==typeof e.height}(e))throw new Error("Can't set bounds: the bounds parameter is malformed.");this.updateWorker({type:"SET_BOUNDS",bounds:e}),this.startLoop()}setTarget(e){if(!o(e))throw new Error("Can't set target: the targetPos parameter is malformed.");this.updateWorker({type:"SET_TARGET",target:e}),this.startLoop()}setCenteringPasses(e){if(!r(e,1))throw new Error("Can't set centering passes: the numberOfCenteringPasses parameter is malformed.");this.updateWorker({type:"SET_CENTERING_PASSES",numberOfCenteringPasses:e})}setCollisionPasses(e){if(!r(e,1))throw new Error("Can't set collisionPasses passes: the numberOfCollisionPasses parameter is malformed.");this.updateWorker({type:"SET_COLLISION_PASSES",numberOfCollisionPasses:e})}setDamping(e){if(!("number"==typeof e&&e>0&&e<1))throw new Error("Can't set damping: the damping parameter is malformed.");this.updateWorker({type:"SET_DAMPING",damping:e})}update(){this.updateWorker({type:"UPDATE"})}dragStart(e){const t="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(t))throw new Error("Can't start dragging circle: the circleRef parameter is malformed.");this.updateWorker({type:"DRAG_START",id:t}),this.startLoop()}drag(e,t){const r="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(r))throw new Error("Can't drag circle: the circleRef parameter is malformed.");if(!o(t))throw new Error("Can't drag circle: the position parameter is malformed.");this.updateWorker({type:"DRAG_MOVE",id:r,position:t}),this.startLoop()}dragEnd(e){const t="object"==typeof e&&void 0!==e.id?e.id:e;if(!i(t))throw new Error("Can't end dragging circle: the circleRef parameter is malformed.");this.updateWorker({type:"DRAG_END",id:t}),this.startLoop()}updateLoop(){this.update(),this.isLooping&&(this.areItemsMoving?this.animationFrameId=requestAnimationFrame((()=>this.updateLoop())):this.stopLoop())}startLoop(){!this.isLooping&&this.initialized&&this.isContinuousModeActive&&(this.isLooping=!0,this.updateListeners({type:"MOVE_START"}),this.animationFrameId=requestAnimationFrame((()=>this.updateLoop())))}stopLoop(){this.isLooping&&(this.isLooping=!1,this.updateListeners({type:"MOVE_END",updatedCircles:this.lastCirclePositions}),cancelAnimationFrame(this.animationFrameId))}hasItemMoved(e){let t=!1;for(let i in e)(Math.abs(e[i].delta.x)>.005||Math.abs(e[i].delta.y)>.005)&&(t=!0);return t}destroy(){this.worker&&this.worker.terminate(),this.stopLoop(),this.onMove=null,this.onMoveStart=null,this.onMoveEnd=null}}export{s as default};
